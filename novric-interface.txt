<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Novric Interface — Mind Upgrade Terminal</title>
  <style>
    :root{
      --bg:#020214; --panel:rgba(255,255,255,0.03);
      --core:#0ea5ff; --vein:#7CFC00; --muted:#9aa4a8;
      --glass:rgba(255,255,255,0.02);
    }
    html,body{height:100%;margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial;background:radial-gradient(ellipse at center,#031026 0%, #01010a 60%);color:#e6f6ff;overflow:hidden}
    .center{position:absolute;inset:0;display:flex;align-items:center;justify-content:center}
    .boot-screen{width:920px;max-width:94%;height:620px;background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));border-radius:16px;box-shadow:0 20px 60px rgba(0,0,0,0.8);overflow:hidden;display:flex}
    /* Left: visuals */
    .visual{flex:1;position:relative;padding:28px;background:linear-gradient(180deg, rgba(14,165,255,0.03), rgba(124,252,0,0.01));}
    .hud{position:relative;height:100%;display:flex;flex-direction:column;align-items:center;justify-content:center}
    .core{width:220px;height:220px;border-radius:50%;background:radial-gradient(circle at 30% 30%, rgba(14,165,255,0.95), rgba(14,165,255,0.35) 50%, rgba(124,252,0,0.08));box-shadow:0 0 60px rgba(14,165,255,0.25), inset 0 0 30px rgba(124,252,0,0.06);display:flex;align-items:center;justify-content:center;position:relative}
    .core:before{content:'';position:absolute;inset:10%;border-radius:50%;box-shadow:0 0 30px rgba(124,252,0,0.25);filter:blur(10px);}
    .veins{position:absolute;inset:0;pointer-events:none}
    .vein-line{position:absolute;height:2px;background:linear-gradient(90deg,var(--vein), rgba(124,252,0,0.25));opacity:0.95;transform-origin:left}
    /* rotating rings */
    .ring{position:absolute;border-radius:50%;border:1px solid rgba(255,255,255,0.04);width:320px;height:320px;animation:spin 18s linear infinite;box-shadow:0 0 40px rgba(14,165,255,0.05) inset}
    .ring.r2{width:420px;height:420px;animation-duration:26s}
    .ring.r3{width:520px;height:520px;animation-duration:38s}
    @keyframes spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}

    .title{position:absolute;top:22px;left:28px;color:var(--core);font-weight:700;letter-spacing:1px}
    .subtitle{position:absolute;top:46px;left:28px;color:var(--muted);font-size:13px}

    /* Right: control panel */
    .panel{width:380px;padding:22px;background:linear-gradient(180deg, rgba(255,255,255,0.01), rgba(255,255,255,0.02));border-left:1px solid rgba(255,255,255,0.03);display:flex;flex-direction:column;gap:12px}
    .panel h2{margin:0;color:var(--core);letter-spacing:0.6px}
    .lock-wrap{display:flex;align-items:center;gap:12px}
    .lock{width:96px;height:96px;border-radius:12px;background:linear-gradient(180deg, rgba(255,255,255,0.01), rgba(255,255,255,0.02));display:flex;align-items:center;justify-content:center;position:relative}
    .lock .lock-core{width:52px;height:52px;border-radius:50%;background:conic-gradient(var(--core), rgba(14,165,255,0.1));box-shadow:0 0 20px rgba(14,165,255,0.25);}
    .lock .lock-anim{position:absolute;inset:6px;border-radius:8px;border:2px solid rgba(14,165,255,0.08);animation:pulse 2.2s infinite}
    @keyframes pulse{0%{opacity:0.2;transform:scale(0.98)}50%{opacity:0.9;transform:scale(1.02)}100%{opacity:0.2;transform:scale(0.98)}}
    .input{display:flex;gap:8px;align-items:center}
    .input input{flex:1;padding:10px;border-radius:8px;background:transparent;border:1px solid rgba(255,255,255,0.04);color:inherit}
    .btn{padding:10px 12px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));color:var(--core);cursor:pointer}

    .log{height:200px;padding:10px;border-radius:8px;background:rgba(0,0,0,0.3);overflow:auto;font-family:monospace;font-size:13px;color:var(--muted)}
    .muted{color:var(--muted);font-size:13px}
    .small{font-size:13px}
    .hidden{display:none}

    /* entrance animations */
    .fade-in{animation:fadeIn .9s ease both}
    @keyframes fadeIn{from{opacity:0;transform:translateY(8px)}to{opacity:1;transform:none}}

    /* checklists */
    .tasks{margin-top:6px;display:flex;flex-direction:column;gap:8px}
    .task{display:flex;gap:8px;align-items:center}
    .task input{width:16px;height:16px}

    /* responsive */
    @media(max-width:980px){.panel{display:none}.boot-screen{height:76vh}} 
  </style>
</head>
<body>
  <div class="center">
    <div class="boot-screen">
      <div class="visual">
        <div class="title">Novric Interface</div>
        <div class="subtitle">Mind Upgrade Terminal — Reactive Console</div>
        <div class="hud">
          <div class="ring r3"></div>
          <div class="ring r2"></div>
          <div class="core" id="core">
            <div class="ring r1"></div>
            <div class="core-text" style="text-align:center">
              <div style="font-weight:800;font-size:18px;color:rgba(255,255,255,0.95)" id="coreLabel">Booting...</div>
              <div style="font-size:12px;color:var(--muted);margin-top:6px" id="coreSub">Initializing reactor</div>
            </div>
            <canvas id="glowCanvas" style="position:absolute;inset:0"></canvas>
            <div class="veins" id="veins"></div>
          </div>
        </div>
      </div>

      <div class="panel">
        <h2 id="panelTitle">Mind Upgrade Terminal</h2>
        <div class="lock-wrap">
          <div class="lock">
            <div class="lock-core" id="lockCore"></div>
            <div class="lock-anim"></div>
          </div>
          <div style="flex:1">
            <div class="small muted">Access Code</div>
            <div class="input">
              <input id="codeInput" placeholder="Enter access code" autocomplete="off" />
              <button class="btn" id="unlockBtn">Unlock</button>
            </div>
            <div class="muted small" style="margin-top:6px">Hint: speak like a Prime — not case sensitive.</div>
          </div>
        </div>

        <div class="log" id="sysLog">System idle.<br></div>

        <div class="tasks fade-in" id="tasksPanel">
          <div class="muted">Today</div>
          <div class="task"><input type="checkbox" id="t1"><label for="t1">10 mins breathing</label></div>
          <div class="task"><input type="checkbox" id="t2"><label for="t2">Study: summarize aloud</label></div>
          <div class="task"><input type="checkbox" id="t3"><label for="t3">Watch a science video + list 3 facts</label></div>
          <div class="task"><input type="checkbox" id="t4"><label for="t4">Night: write 3 observations</label></div>
        </div>

        <div style="display:flex;gap:8px;margin-top:auto;align-items:center">
          <button class="btn" id="exportBtn">Export progress</button>
          <button class="btn" id="downloadBtn">Download HTML</button>
        </div>
      </div>
    </div>
  </div>

  <audio id="arcAudio" class="hidden"></audio>

  <script>
    // Access code (case-insensitive)
    const ACCESS_CODE = 'nova prime';

    // Utilities
    const sysLog = document.getElementById('sysLog');
    function log(msg){ sysLog.innerHTML += msg + '<br>'; sysLog.scrollTop = sysLog.scrollHeight; }

    // Core boot animation sequence
    const coreLabel = document.getElementById('coreLabel');
    const coreSub = document.getElementById('coreSub');
    const lockCore = document.getElementById('lockCore');
    const veins = document.getElementById('veins');

    // Create veins dynamically
    function makeVeins(){
      for(let i=0;i<8;i++){
        const div=document.createElement('div'); div.className='vein-line';
        div.style.top = (30 + i*7) + '%'; div.style.left='6%'; div.style.width='88%'; div.style.transform = 'rotate(' + (Math.random()*6-3) + 'deg)';
        veins.appendChild(div);
      }
    }
    makeVeins();

    // Web Audio synthesis for cinematic arc reactor sound
    const AudioCtx = window.AudioContext || window.webkitAudioContext;
    let audioCtx=null;
    function playArcReactor(){
      if(!AudioCtx) return;
      audioCtx = new AudioCtx();
      const o = audioCtx.createOscillator(); const g = audioCtx.createGain();
      o.type='sawtooth'; o.frequency.setValueAtTime(40, audioCtx.currentTime);
      o.connect(g); g.connect(audioCtx.destination);
      g.gain.setValueAtTime(0.0001, audioCtx.currentTime);
      g.gain.linearRampToValueAtTime(0.12, audioCtx.currentTime + 1.4);
      o.frequency.exponentialRampToValueAtTime(220, audioCtx.currentTime + 2.6);
      setTimeout(()=>{ g.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.6); o.stop(audioCtx.currentTime + 0.6); },3400);
      o.start();
    }

    // Speech greeting
    function speak(text){ if('speechSynthesis' in window){ const u=new SpeechSynthesisUtterance(text); u.lang='en-US'; u.rate=1; window.speechSynthesis.cancel(); window.speechSynthesis.speak(u);} }

    // Typewriter effect for labels
    function typeWriter(el, text, delay=40){ el.textContent=''; let i=0; const t=setInterval(()=>{ el.textContent += text[i++]; if(i>=text.length){ clearInterval(t); } }, delay); }

    // Login workflow
    const unlockBtn = document.getElementById('unlockBtn'); const codeInput = document.getElementById('codeInput');
    unlockBtn.addEventListener('click', tryUnlock); codeInput.addEventListener('keydown', (e)=>{ if(e.key==='Enter') tryUnlock(); });

    function tryUnlock(){ const v = (codeInput.value||'').trim().toLowerCase(); log('Attempting unlock...'); if(!v){ log('No code entered.'); return; } if(v === ACCESS_CODE){ onUnlock(); } else { log('Access Denied.'); flashLock(false); } }

    function flashLock(ok){ lockCore.style.boxShadow = ok? '0 0 28px rgba(124,252,0,0.9)' : '0 0 18px rgba(255,80,80,0.9)'; setTimeout(()=>{ lockCore.style.boxShadow = ''; },900); }

    function onUnlock(){ log('Access Granted.'); flashLock(true); // cinematic startup
      coreLabel.textContent = 'Powering'; coreSub.textContent = 'Charging arc reactor...';
      playArcReactor();
      setTimeout(()=>{ typeWriter(coreLabel, 'Novric Interface'); typeWriter(coreSub, 'System online, Novric.'); speak('System online, Novric.'); },1500);
      // reveal tasks and allow interaction
      document.getElementById('tasksPanel').classList.add('fade-in');
    }

    // Tasks persistence
    ['t1','t2','t3','t4'].forEach(id=>{ const el=document.getElementById(id); el.checked = localStorage.getItem('ns_'+id) === 'true'; el.addEventListener('change', ()=>{ localStorage.setItem('ns_'+id, el.checked); showAIResponse(el); }); });

    function showAIResponse(el){ if(el.checked){ log('Task completed: ' + el.nextSibling.textContent.trim()); aiPulse(); } }

    function aiPulse(){ coreLabel.style.transition='transform 0.2s'; coreLabel.style.transform='scale(1.03)'; setTimeout(()=> coreLabel.style.transform='scale(1)',200); }

    // Export and download
    document.getElementById('exportBtn').addEventListener('click', ()=>{
      const data={}; Object.keys(localStorage).filter(k=>k.startsWith('ns_')).forEach(k=>data[k]=localStorage.getItem(k)); const blob=new Blob([JSON.stringify(data,null,2)],{type:'application/json'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='Novric_Progress.json'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    });
    document.getElementById('downloadBtn').addEventListener('click', ()=>{ const html='<!doctype html>'+document.documentElement.outerHTML; const blob=new Blob([html],{type:'text/html'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='Novric_Interface_v1.html'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    });

    // Init
    window.addEventListener('load', ()=>{ log('Novric boot sequence ready.'); coreLabel.textContent='Novric Interface'; coreSub.textContent='Awaiting unlock'; });

    // Simple canvas glow effect (subtle)
    (function(){ const c=document.getElementById('glowCanvas'); if(!c) return; const dpr=window.devicePixelRatio||1; c.width=c.clientWidth*dpr; c.height=c.clientHeight*dpr; const ctx=c.getContext('2d'); ctx.scale(dpr,dpr);
      function draw(){ ctx.clearRect(0,0,c.width/dpr,c.height/dpr); const grd = ctx.createRadialGradient(c.width/2/dpr, c.height/2/dpr, 10, c.width/2/dpr, c.height/2/dpr, 180); grd.addColorStop(0,'rgba(14,165,255,0.35)'); grd.addColorStop(0.6,'rgba(124,252,0,0.06)'); grd.addColorStop(1,'rgba(0,0,0,0)'); ctx.fillStyle=grd; ctx.fillRect(0,0,c.width/dpr,c.height/dpr); requestAnimationFrame(draw);} draw(); })();

  </script>
</body>
</html>
